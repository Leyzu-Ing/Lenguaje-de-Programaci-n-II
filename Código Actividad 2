// Actividad_2_UzielLopez.conexi贸n de la base de datos en SQL
//

#include <windows.h>
#include <sql.h>
#include <sqlext.h>
#include <iostream>

using namespace std;

int main() {
	SQLHENV hEnv;
	SQLHDBC hDbc;
	SQLRETURN ret;

	//Asignar un gestor de entorno
	ret = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
	ret = SQLSetEnvAttr(hEnv, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, 0);

	//Asignar un gestor de la conexi贸n
	ret = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);

	//Conectarse a la base de datos
	ret = SQLConnect(hDbc, (SQLWCHAR*)L"sqlserver", SQL_NTS, (SQLWCHAR*)L"Username", SQL_NTS, (SQLWCHAR*)L"Password", SQL_NTS);

	if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
		cout << "Conectado a la base de datos exitosamente." << endl;

		SQLHSTMT hStmt;
		ret = SQLAllocHandle(SQL_HANDLE_STMT, hDbc, &hStmt);
		wcout << L"+-----+----------------------+ " << endl;
		wcout << L"| No. | Nombre Empleado      | " << endl;
		wcout << L"+-----+----------------------+ " << endl;

		//Seleccionar la base de datos
		ret = SQLExecDirect(hStmt, (SQLWCHAR*)L"SELECT * FROM Empleados", SQL_NTS);

		if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
			int num_empleado;
			SQLWCHAR name[30];
			while (SQLFetch(hStmt) == SQL_SUCCESS) {
				SQLGetData(hStmt, 1, SQL_C_LONG, &num_empleado, 0, NULL);
				SQLGetData(hStmt, 2, SQL_C_WCHAR, name, sizeof(name), NULL);

				wcout << "   " << num_empleado <<"    "<< name << endl;

			}
			wcout << L"+-----+----------------------+ " << endl;
		}
		//Liberar el manejador de Conexi贸n
		SQLFreeHandle(SQL_HANDLE_STMT, hStmt);

	}
	else {
		cout << "Fallo la conexi贸n de la base de datos." << endl;
	}

	//Desconectar y liberar manejadores
	SQLDisconnect(hDbc);
	SQLFreeHandle(SQL_HANDLE_DBC, hDbc);
	SQLFreeHandle(SQL_HANDLE_ENV, hEnv);

	return 0;
}
